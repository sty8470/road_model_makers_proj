# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_layout.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1654, 931)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.main_widget_layout = QtWidgets.QHBoxLayout()
        self.main_widget_layout.setSpacing(10)
        self.main_widget_layout.setObjectName("main_widget_layout")
        self.frame_1 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_1.sizePolicy().hasHeightForWidth())
        self.frame_1.setSizePolicy(sizePolicy)
        self.frame_1.setLineWidth(0)
        self.frame_1.setObjectName("frame_1")
        self.data_layout = QtWidgets.QVBoxLayout(self.frame_1)
        self.data_layout.setContentsMargins(0, 0, 0, 0)
        self.data_layout.setObjectName("data_layout")
        self.treeWidget_data = QtWidgets.QTreeWidget(self.frame_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget_data.sizePolicy().hasHeightForWidth())
        self.treeWidget_data.setSizePolicy(sizePolicy)
        self.treeWidget_data.setObjectName("treeWidget_data")
        self.data_layout.addWidget(self.treeWidget_data)
        self.treeWidget_style = QtWidgets.QTreeWidget(self.frame_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget_style.sizePolicy().hasHeightForWidth())
        self.treeWidget_style.setSizePolicy(sizePolicy)
        self.treeWidget_style.setObjectName("treeWidget_style")
        self.data_layout.addWidget(self.treeWidget_style)
        self.main_widget_layout.addWidget(self.frame_1)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_mainwidget = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_mainwidget.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.verticalLayout_mainwidget.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_mainwidget.setSpacing(10)
        self.verticalLayout_mainwidget.setObjectName("verticalLayout_mainwidget")
        self.horizontalLayout_veiwbar = QtWidgets.QHBoxLayout()
        self.horizontalLayout_veiwbar.setObjectName("horizontalLayout_veiwbar")
        self.rbtn_view_select = QtWidgets.QRadioButton(self.frame_2)
        self.rbtn_view_select.setEnabled(True)
        self.rbtn_view_select.setObjectName("rbtn_view_select")
        self.horizontalLayout_veiwbar.addWidget(self.rbtn_view_select)
        self.rbtn_view_trans = QtWidgets.QRadioButton(self.frame_2)
        self.rbtn_view_trans.setStyleSheet("")
        self.rbtn_view_trans.setChecked(True)
        self.rbtn_view_trans.setObjectName("rbtn_view_trans")
        self.horizontalLayout_veiwbar.addWidget(self.rbtn_view_trans)
        self.rbtn_view_rotate = QtWidgets.QRadioButton(self.frame_2)
        self.rbtn_view_rotate.setObjectName("rbtn_view_rotate")
        self.horizontalLayout_veiwbar.addWidget(self.rbtn_view_rotate)
        self.btn_view_xy = QtWidgets.QPushButton(self.frame_2)
        self.btn_view_xy.setObjectName("btn_view_xy")
        self.horizontalLayout_veiwbar.addWidget(self.btn_view_xy)
        self.btn_view_yz = QtWidgets.QPushButton(self.frame_2)
        self.btn_view_yz.setObjectName("btn_view_yz")
        self.horizontalLayout_veiwbar.addWidget(self.btn_view_yz)
        self.btn_view_zx = QtWidgets.QPushButton(self.frame_2)
        self.btn_view_zx.setObjectName("btn_view_zx")
        self.horizontalLayout_veiwbar.addWidget(self.btn_view_zx)
        self.btn_view_south = QtWidgets.QPushButton(self.frame_2)
        self.btn_view_south.setObjectName("btn_view_south")
        self.horizontalLayout_veiwbar.addWidget(self.btn_view_south)
        self.label_camera_speed = QtWidgets.QLabel(self.frame_2)
        self.label_camera_speed.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_camera_speed.setAlignment(QtCore.Qt.AlignCenter)
        self.label_camera_speed.setObjectName("label_camera_speed")
        self.horizontalLayout_veiwbar.addWidget(self.label_camera_speed)
        self.slider_camera_speed = QtWidgets.QSlider(self.frame_2)
        self.slider_camera_speed.setMinimum(-10)
        self.slider_camera_speed.setMaximum(10)
        self.slider_camera_speed.setOrientation(QtCore.Qt.Horizontal)
        self.slider_camera_speed.setObjectName("slider_camera_speed")
        self.horizontalLayout_veiwbar.addWidget(self.slider_camera_speed)
        self.edit_camera_speed = QtWidgets.QLineEdit(self.frame_2)
        self.edit_camera_speed.setAlignment(QtCore.Qt.AlignCenter)
        self.edit_camera_speed.setObjectName("edit_camera_speed")
        self.horizontalLayout_veiwbar.addWidget(self.edit_camera_speed)
        self.reset_camera_speed = QtWidgets.QPushButton(self.frame_2)
        self.reset_camera_speed.setObjectName("reset_camera_speed")
        self.horizontalLayout_veiwbar.addWidget(self.reset_camera_speed)
        self.horizontalLayout_veiwbar.setStretch(3, 2)
        self.horizontalLayout_veiwbar.setStretch(4, 2)
        self.horizontalLayout_veiwbar.setStretch(5, 2)
        self.horizontalLayout_veiwbar.setStretch(6, 2)
        self.horizontalLayout_veiwbar.setStretch(7, 1)
        self.horizontalLayout_veiwbar.setStretch(8, 2)
        self.horizontalLayout_veiwbar.setStretch(9, 1)
        self.horizontalLayout_veiwbar.setStretch(10, 1)
        self.verticalLayout_mainwidget.addLayout(self.horizontalLayout_veiwbar)
        self.verticalLayout_opengl = QtWidgets.QVBoxLayout()
        self.verticalLayout_opengl.setObjectName("verticalLayout_opengl")
        self.verticalLayout_mainwidget.addLayout(self.verticalLayout_opengl)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_rotation_x = QtWidgets.QHBoxLayout()
        self.horizontalLayout_rotation_x.setSpacing(10)
        self.horizontalLayout_rotation_x.setObjectName("horizontalLayout_rotation_x")
        self.label_x = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_x.sizePolicy().hasHeightForWidth())
        self.label_x.setSizePolicy(sizePolicy)
        self.label_x.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_x.setTextFormat(QtCore.Qt.AutoText)
        self.label_x.setAlignment(QtCore.Qt.AlignCenter)
        self.label_x.setObjectName("label_x")
        self.horizontalLayout_rotation_x.addWidget(self.label_x)
        self.slider_x = QtWidgets.QSlider(self.frame_2)
        self.slider_x.setMinimum(-90)
        self.slider_x.setMaximum(0)
        self.slider_x.setOrientation(QtCore.Qt.Horizontal)
        self.slider_x.setObjectName("slider_x")
        self.horizontalLayout_rotation_x.addWidget(self.slider_x)
        self.label = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout_rotation_x.addWidget(self.label)
        self.edit_xRot = QtWidgets.QLineEdit(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.edit_xRot.sizePolicy().hasHeightForWidth())
        self.edit_xRot.setSizePolicy(sizePolicy)
        self.edit_xRot.setAlignment(QtCore.Qt.AlignCenter)
        self.edit_xRot.setObjectName("edit_xRot")
        self.horizontalLayout_rotation_x.addWidget(self.edit_xRot)
        self.reset_xRot = QtWidgets.QPushButton(self.frame_2)
        self.reset_xRot.setObjectName("reset_xRot")
        self.horizontalLayout_rotation_x.addWidget(self.reset_xRot)
        self.horizontalLayout_rotation_x.setStretch(0, 2)
        self.horizontalLayout_rotation_x.setStretch(1, 5)
        self.horizontalLayout_rotation_x.setStretch(2, 2)
        self.horizontalLayout_rotation_x.setStretch(3, 1)
        self.horizontalLayout_rotation_x.setStretch(4, 1)
        self.verticalLayout_5.addLayout(self.horizontalLayout_rotation_x)
        self.horizontalLayout_rotation_z = QtWidgets.QHBoxLayout()
        self.horizontalLayout_rotation_z.setSpacing(10)
        self.horizontalLayout_rotation_z.setObjectName("horizontalLayout_rotation_z")
        self.label_z = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_z.sizePolicy().hasHeightForWidth())
        self.label_z.setSizePolicy(sizePolicy)
        self.label_z.setAlignment(QtCore.Qt.AlignCenter)
        self.label_z.setObjectName("label_z")
        self.horizontalLayout_rotation_z.addWidget(self.label_z)
        self.slider_z = QtWidgets.QSlider(self.frame_2)
        self.slider_z.setMinimum(-180)
        self.slider_z.setMaximum(180)
        self.slider_z.setOrientation(QtCore.Qt.Horizontal)
        self.slider_z.setObjectName("slider_z")
        self.horizontalLayout_rotation_z.addWidget(self.slider_z)
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_rotation_z.addWidget(self.label_2)
        self.edit_zRot = QtWidgets.QLineEdit(self.frame_2)
        self.edit_zRot.setAlignment(QtCore.Qt.AlignCenter)
        self.edit_zRot.setObjectName("edit_zRot")
        self.horizontalLayout_rotation_z.addWidget(self.edit_zRot)
        self.reset_zRot = QtWidgets.QPushButton(self.frame_2)
        self.reset_zRot.setObjectName("reset_zRot")
        self.horizontalLayout_rotation_z.addWidget(self.reset_zRot)
        self.horizontalLayout_rotation_z.setStretch(0, 2)
        self.horizontalLayout_rotation_z.setStretch(1, 5)
        self.horizontalLayout_rotation_z.setStretch(2, 2)
        self.horizontalLayout_rotation_z.setStretch(3, 1)
        self.horizontalLayout_rotation_z.setStretch(4, 1)
        self.verticalLayout_5.addLayout(self.horizontalLayout_rotation_z)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_east = QtWidgets.QLabel(self.frame_2)
        self.label_east.setAlignment(QtCore.Qt.AlignCenter)
        self.label_east.setObjectName("label_east")
        self.horizontalLayout_3.addWidget(self.label_east)
        self.edit_east = QtWidgets.QLineEdit(self.frame_2)
        self.edit_east.setObjectName("edit_east")
        self.horizontalLayout_3.addWidget(self.edit_east)
        self.horizontalLayout_3.setStretch(0, 4)
        self.horizontalLayout_3.setStretch(1, 6)
        self.verticalLayout_6.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_north = QtWidgets.QLabel(self.frame_2)
        self.label_north.setAlignment(QtCore.Qt.AlignCenter)
        self.label_north.setObjectName("label_north")
        self.horizontalLayout_4.addWidget(self.label_north)
        self.edit_north = QtWidgets.QLineEdit(self.frame_2)
        self.edit_north.setObjectName("edit_north")
        self.horizontalLayout_4.addWidget(self.edit_north)
        self.horizontalLayout_4.setStretch(0, 4)
        self.horizontalLayout_4.setStretch(1, 6)
        self.verticalLayout_6.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_up = QtWidgets.QLabel(self.frame_2)
        self.label_up.setAlignment(QtCore.Qt.AlignCenter)
        self.label_up.setObjectName("label_up")
        self.horizontalLayout_5.addWidget(self.label_up)
        self.edit_up = QtWidgets.QLineEdit(self.frame_2)
        self.edit_up.setObjectName("edit_up")
        self.horizontalLayout_5.addWidget(self.edit_up)
        self.horizontalLayout_5.setStretch(0, 4)
        self.horizontalLayout_5.setStretch(1, 6)
        self.verticalLayout_6.addLayout(self.horizontalLayout_5)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout.addItem(spacerItem)
        self.reset_up = QtWidgets.QPushButton(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.reset_up.sizePolicy().hasHeightForWidth())
        self.reset_up.setSizePolicy(sizePolicy)
        self.reset_up.setBaseSize(QtCore.QSize(0, 0))
        self.reset_up.setObjectName("reset_up")
        self.horizontalLayout.addWidget(self.reset_up)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout.addItem(spacerItem1)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 8)
        self.horizontalLayout.setStretch(2, 1)
        self.verticalLayout_6.addLayout(self.horizontalLayout)
        self.verticalLayout_6.setStretch(0, 1)
        self.verticalLayout_6.setStretch(1, 1)
        self.verticalLayout_6.setStretch(2, 1)
        self.verticalLayout_6.setStretch(3, 1)
        self.horizontalLayout_2.addLayout(self.verticalLayout_6)
        self.horizontalLayout_2.setStretch(0, 6)
        self.verticalLayout_mainwidget.addLayout(self.horizontalLayout_2)
        self.verticalLayout_rotation = QtWidgets.QVBoxLayout()
        self.verticalLayout_rotation.setSpacing(0)
        self.verticalLayout_rotation.setObjectName("verticalLayout_rotation")
        self.verticalLayout_mainwidget.addLayout(self.verticalLayout_rotation)
        self.horizontalLayout_log = QtWidgets.QHBoxLayout()
        self.horizontalLayout_log.setObjectName("horizontalLayout_log")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_log.addItem(spacerItem2)
        self.label_range_x = QtWidgets.QLabel(self.frame_2)
        self.label_range_x.setObjectName("label_range_x")
        self.horizontalLayout_log.addWidget(self.label_range_x)
        self.line_1 = QtWidgets.QFrame(self.frame_2)
        self.line_1.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_1.setObjectName("line_1")
        self.horizontalLayout_log.addWidget(self.line_1)
        self.label_range_y = QtWidgets.QLabel(self.frame_2)
        self.label_range_y.setObjectName("label_range_y")
        self.horizontalLayout_log.addWidget(self.label_range_y)
        self.line_2 = QtWidgets.QFrame(self.frame_2)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_log.addWidget(self.line_2)
        self.label_zoom = QtWidgets.QLabel(self.frame_2)
        self.label_zoom.setObjectName("label_zoom")
        self.horizontalLayout_log.addWidget(self.label_zoom)
        self.line_3 = QtWidgets.QFrame(self.frame_2)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.horizontalLayout_log.addWidget(self.line_3)
        self.verticalLayout_mainwidget.addLayout(self.horizontalLayout_log)
        self.verticalLayout_mainwidget.setStretch(1, 10)
        self.main_widget_layout.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_3.sizePolicy().hasHeightForWidth())
        self.frame_3.setSizePolicy(sizePolicy)
        self.frame_3.setObjectName("frame_3")
        self.attri_layout = QtWidgets.QHBoxLayout(self.frame_3)
        self.attri_layout.setContentsMargins(0, 0, 0, 0)
        self.attri_layout.setObjectName("attri_layout")
        self.property_simulation_tab = QtWidgets.QTabWidget(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.property_simulation_tab.sizePolicy().hasHeightForWidth())
        self.property_simulation_tab.setSizePolicy(sizePolicy)
        self.property_simulation_tab.setTabsClosable(False)
        self.property_simulation_tab.setObjectName("property_simulation_tab")
        self.property_tab = QtWidgets.QWidget()
        self.property_tab.setObjectName("property_tab")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.property_tab)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.treeWidget_attr = QtWidgets.QTreeWidget(self.property_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget_attr.sizePolicy().hasHeightForWidth())
        self.treeWidget_attr.setSizePolicy(sizePolicy)
        self.treeWidget_attr.setMinimumSize(QtCore.QSize(310, 0))
        self.treeWidget_attr.setObjectName("treeWidget_attr")
        self.horizontalLayout_6.addWidget(self.treeWidget_attr)
        self.property_simulation_tab.addTab(self.property_tab, "")
        self.batch_simulation_tab = QtWidgets.QWidget()
        self.batch_simulation_tab.setObjectName("batch_simulation_tab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.batch_simulation_tab)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.btn_load_test_suite = QtWidgets.QPushButton(self.batch_simulation_tab)
        self.btn_load_test_suite.setObjectName("btn_load_test_suite")
        self.horizontalLayout_8.addWidget(self.btn_load_test_suite)
        self.btn_save_test_suite = QtWidgets.QPushButton(self.batch_simulation_tab)
        self.btn_save_test_suite.setObjectName("btn_save_test_suite")
        self.horizontalLayout_8.addWidget(self.btn_save_test_suite)
        self.horizontalLayout_7.addLayout(self.horizontalLayout_8)
        self.verticalLayout_3.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.btn_add_batch_scenario = QtWidgets.QPushButton(self.batch_simulation_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_add_batch_scenario.sizePolicy().hasHeightForWidth())
        self.btn_add_batch_scenario.setSizePolicy(sizePolicy)
        self.btn_add_batch_scenario.setMinimumSize(QtCore.QSize(107, 0))
        self.btn_add_batch_scenario.setObjectName("btn_add_batch_scenario")
        self.horizontalLayout_9.addWidget(self.btn_add_batch_scenario)
        self.btn_del_batch_scenario = QtWidgets.QPushButton(self.batch_simulation_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_del_batch_scenario.sizePolicy().hasHeightForWidth())
        self.btn_del_batch_scenario.setSizePolicy(sizePolicy)
        self.btn_del_batch_scenario.setMinimumSize(QtCore.QSize(107, 0))
        self.btn_del_batch_scenario.setObjectName("btn_del_batch_scenario")
        self.horizontalLayout_9.addWidget(self.btn_del_batch_scenario)
        self.btn_upward_batch_scenario = QtWidgets.QPushButton(self.batch_simulation_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_upward_batch_scenario.sizePolicy().hasHeightForWidth())
        self.btn_upward_batch_scenario.setSizePolicy(sizePolicy)
        self.btn_upward_batch_scenario.setMinimumSize(QtCore.QSize(50, 0))
        self.btn_upward_batch_scenario.setObjectName("btn_upward_batch_scenario")
        self.horizontalLayout_9.addWidget(self.btn_upward_batch_scenario)
        self.btn_downward_batch_scenario = QtWidgets.QPushButton(self.batch_simulation_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_downward_batch_scenario.sizePolicy().hasHeightForWidth())
        self.btn_downward_batch_scenario.setSizePolicy(sizePolicy)
        self.btn_downward_batch_scenario.setMinimumSize(QtCore.QSize(50, 0))
        self.btn_downward_batch_scenario.setObjectName("btn_downward_batch_scenario")
        self.horizontalLayout_9.addWidget(self.btn_downward_batch_scenario)
        self.verticalLayout_3.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.btn_select_all_batch_scenario = QtWidgets.QPushButton(self.batch_simulation_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_select_all_batch_scenario.sizePolicy().hasHeightForWidth())
        self.btn_select_all_batch_scenario.setSizePolicy(sizePolicy)
        self.btn_select_all_batch_scenario.setObjectName("btn_select_all_batch_scenario")
        self.horizontalLayout_10.addWidget(self.btn_select_all_batch_scenario)
        self.btn_start_batch_scenario = QtWidgets.QPushButton(self.batch_simulation_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_start_batch_scenario.sizePolicy().hasHeightForWidth())
        self.btn_start_batch_scenario.setSizePolicy(sizePolicy)
        self.btn_start_batch_scenario.setObjectName("btn_start_batch_scenario")
        self.horizontalLayout_10.addWidget(self.btn_start_batch_scenario)
        self.btn_stop_batch_scenario = QtWidgets.QPushButton(self.batch_simulation_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_stop_batch_scenario.sizePolicy().hasHeightForWidth())
        self.btn_stop_batch_scenario.setSizePolicy(sizePolicy)
        self.btn_stop_batch_scenario.setObjectName("btn_stop_batch_scenario")
        self.horizontalLayout_10.addWidget(self.btn_stop_batch_scenario)
        self.btn_skip_batch_scenario = QtWidgets.QPushButton(self.batch_simulation_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_skip_batch_scenario.sizePolicy().hasHeightForWidth())
        self.btn_skip_batch_scenario.setSizePolicy(sizePolicy)
        self.btn_skip_batch_scenario.setMinimumSize(QtCore.QSize(50, 0))
        self.btn_skip_batch_scenario.setObjectName("btn_skip_batch_scenario")
        self.horizontalLayout_10.addWidget(self.btn_skip_batch_scenario)
        self.verticalLayout_3.addLayout(self.horizontalLayout_10)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.table_batch_scenario = QtWidgets.QTableWidget(self.batch_simulation_tab)
        self.table_batch_scenario.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.table_batch_scenario.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_batch_scenario.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_batch_scenario.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table_batch_scenario.setObjectName("table_batch_scenario")
        self.table_batch_scenario.setColumnCount(4)
        self.table_batch_scenario.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table_batch_scenario.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_batch_scenario.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_batch_scenario.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_batch_scenario.setHorizontalHeaderItem(3, item)
        self.table_batch_scenario.horizontalHeader().setHighlightSections(False)
        self.table_batch_scenario.verticalHeader().setVisible(False)
        self.verticalLayout_2.addWidget(self.table_batch_scenario)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.property_simulation_tab.addTab(self.batch_simulation_tab, "")
        self.simulation_result_tab = QtWidgets.QWidget()
        self.simulation_result_tab.setObjectName("simulation_result_tab")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.simulation_result_tab)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.text_total_num = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_total_num.sizePolicy().hasHeightForWidth())
        self.text_total_num.setSizePolicy(sizePolicy)
        self.text_total_num.setMaximumSize(QtCore.QSize(40, 16))
        self.text_total_num.setObjectName("text_total_num")
        self.horizontalLayout_11.addWidget(self.text_total_num)
        self.label_total_num = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_total_num.sizePolicy().hasHeightForWidth())
        self.label_total_num.setSizePolicy(sizePolicy)
        self.label_total_num.setMaximumSize(QtCore.QSize(16777215, 16))
        self.label_total_num.setText("")
        self.label_total_num.setObjectName("label_total_num")
        self.horizontalLayout_11.addWidget(self.label_total_num)
        self.text_succeeded_icon = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_succeeded_icon.sizePolicy().hasHeightForWidth())
        self.text_succeeded_icon.setSizePolicy(sizePolicy)
        self.text_succeeded_icon.setMaximumSize(QtCore.QSize(42, 16))
        self.text_succeeded_icon.setText("")
        self.text_succeeded_icon.setObjectName("text_succeeded_icon")
        self.horizontalLayout_11.addWidget(self.text_succeeded_icon)
        self.text_succeeded_colon = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_succeeded_colon.sizePolicy().hasHeightForWidth())
        self.text_succeeded_colon.setSizePolicy(sizePolicy)
        self.text_succeeded_colon.setMaximumSize(QtCore.QSize(10, 16))
        self.text_succeeded_colon.setObjectName("text_succeeded_colon")
        self.horizontalLayout_11.addWidget(self.text_succeeded_colon)
        self.label_succeeded = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_succeeded.sizePolicy().hasHeightForWidth())
        self.label_succeeded.setSizePolicy(sizePolicy)
        self.label_succeeded.setMaximumSize(QtCore.QSize(16777215, 16))
        self.label_succeeded.setText("")
        self.label_succeeded.setObjectName("label_succeeded")
        self.horizontalLayout_11.addWidget(self.label_succeeded)
        self.text_failed_icon = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_failed_icon.sizePolicy().hasHeightForWidth())
        self.text_failed_icon.setSizePolicy(sizePolicy)
        self.text_failed_icon.setMaximumSize(QtCore.QSize(42, 16))
        self.text_failed_icon.setText("")
        self.text_failed_icon.setObjectName("text_failed_icon")
        self.horizontalLayout_11.addWidget(self.text_failed_icon)
        self.text_failed_colon = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_failed_colon.sizePolicy().hasHeightForWidth())
        self.text_failed_colon.setSizePolicy(sizePolicy)
        self.text_failed_colon.setMaximumSize(QtCore.QSize(10, 16))
        self.text_failed_colon.setObjectName("text_failed_colon")
        self.horizontalLayout_11.addWidget(self.text_failed_colon)
        self.label_failed = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_failed.sizePolicy().hasHeightForWidth())
        self.label_failed.setSizePolicy(sizePolicy)
        self.label_failed.setMaximumSize(QtCore.QSize(16777215, 16))
        self.label_failed.setText("")
        self.label_failed.setObjectName("label_failed")
        self.horizontalLayout_11.addWidget(self.label_failed)
        self.text_none_icon = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_none_icon.sizePolicy().hasHeightForWidth())
        self.text_none_icon.setSizePolicy(sizePolicy)
        self.text_none_icon.setMaximumSize(QtCore.QSize(42, 16))
        self.text_none_icon.setText("")
        self.text_none_icon.setObjectName("text_none_icon")
        self.horizontalLayout_11.addWidget(self.text_none_icon)
        self.text_none_colon = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_none_colon.sizePolicy().hasHeightForWidth())
        self.text_none_colon.setSizePolicy(sizePolicy)
        self.text_none_colon.setMaximumSize(QtCore.QSize(10, 16))
        self.text_none_colon.setObjectName("text_none_colon")
        self.horizontalLayout_11.addWidget(self.text_none_colon)
        self.label_none = QtWidgets.QLabel(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_none.sizePolicy().hasHeightForWidth())
        self.label_none.setSizePolicy(sizePolicy)
        self.label_none.setMaximumSize(QtCore.QSize(16777215, 16))
        self.label_none.setText("")
        self.label_none.setObjectName("label_none")
        self.horizontalLayout_11.addWidget(self.label_none)
        self.btn_simulation_result_clear = QtWidgets.QPushButton(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_simulation_result_clear.sizePolicy().hasHeightForWidth())
        self.btn_simulation_result_clear.setSizePolicy(sizePolicy)
        self.btn_simulation_result_clear.setMaximumSize(QtCore.QSize(16777215, 20))
        self.btn_simulation_result_clear.setObjectName("btn_simulation_result_clear")
        self.horizontalLayout_11.addWidget(self.btn_simulation_result_clear)
        self.verticalLayout_7.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.table_simulation_result_list = QtWidgets.QTableWidget(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.table_simulation_result_list.sizePolicy().hasHeightForWidth())
        self.table_simulation_result_list.setSizePolicy(sizePolicy)
        self.table_simulation_result_list.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_simulation_result_list.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_simulation_result_list.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table_simulation_result_list.setGridStyle(QtCore.Qt.SolidLine)
        self.table_simulation_result_list.setCornerButtonEnabled(True)
        self.table_simulation_result_list.setColumnCount(4)
        self.table_simulation_result_list.setObjectName("table_simulation_result_list")
        self.table_simulation_result_list.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table_simulation_result_list.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_simulation_result_list.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_simulation_result_list.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_simulation_result_list.setHorizontalHeaderItem(3, item)
        self.table_simulation_result_list.horizontalHeader().setCascadingSectionResizes(False)
        self.table_simulation_result_list.horizontalHeader().setDefaultSectionSize(100)
        self.table_simulation_result_list.horizontalHeader().setMinimumSectionSize(20)
        self.table_simulation_result_list.horizontalHeader().setSortIndicatorShown(False)
        self.table_simulation_result_list.horizontalHeader().setStretchLastSection(True)
        self.table_simulation_result_list.verticalHeader().setVisible(False)
        self.horizontalLayout_12.addWidget(self.table_simulation_result_list)
        self.verticalLayout_7.addLayout(self.horizontalLayout_12)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.table_simulation_result = QtWidgets.QTableWidget(self.simulation_result_tab)
        self.table_simulation_result.setBaseSize(QtCore.QSize(0, 0))
        self.table_simulation_result.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.table_simulation_result.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_simulation_result.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_simulation_result.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table_simulation_result.setIconSize(QtCore.QSize(0, 0))
        self.table_simulation_result.setObjectName("table_simulation_result")
        self.table_simulation_result.setColumnCount(1)
        self.table_simulation_result.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.table_simulation_result.setHorizontalHeaderItem(0, item)
        self.table_simulation_result.horizontalHeader().setStretchLastSection(True)
        self.table_simulation_result.verticalHeader().setVisible(False)
        self.verticalLayout_4.addWidget(self.table_simulation_result)
        self.verticalLayout_7.addLayout(self.verticalLayout_4)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.simulation_result_progress_bar = QtWidgets.QProgressBar(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.simulation_result_progress_bar.sizePolicy().hasHeightForWidth())
        self.simulation_result_progress_bar.setSizePolicy(sizePolicy)
        self.simulation_result_progress_bar.setProperty("value", 0)
        self.simulation_result_progress_bar.setObjectName("simulation_result_progress_bar")
        self.horizontalLayout_16.addWidget(self.simulation_result_progress_bar)
        self.btn_open_log_folder = QtWidgets.QPushButton(self.simulation_result_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_open_log_folder.sizePolicy().hasHeightForWidth())
        self.btn_open_log_folder.setSizePolicy(sizePolicy)
        self.btn_open_log_folder.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_open_log_folder.setIconSize(QtCore.QSize(16, 16))
        self.btn_open_log_folder.setObjectName("btn_open_log_folder")
        self.horizontalLayout_16.addWidget(self.btn_open_log_folder)
        self.verticalLayout_7.addLayout(self.horizontalLayout_16)
        self.property_simulation_tab.addTab(self.simulation_result_tab, "")
        self.attri_layout.addWidget(self.property_simulation_tab)
        self.main_widget_layout.addWidget(self.frame_3)
        self.main_widget_layout.setStretch(0, 1)
        self.main_widget_layout.setStretch(2, 1)
        self.verticalLayout.addLayout(self.main_widget_layout)
        self.frame_log = QtWidgets.QFrame(self.centralwidget)
        self.frame_log.setObjectName("frame_log")
        self.log_widget_layout = QtWidgets.QVBoxLayout(self.frame_log)
        self.log_widget_layout.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        self.log_widget_layout.setContentsMargins(0, 0, 0, 0)
        self.log_widget_layout.setObjectName("log_widget_layout")
        self.verticalLayout.addWidget(self.frame_log)
        self.gridLayout.addLayout(self.verticalLayout, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1654, 21))
        self.menubar.setObjectName("menubar")
        self.menuFiles = QtWidgets.QMenu(self.menubar)
        self.menuFiles.setObjectName("menuFiles")
        self.menuFileImport = QtWidgets.QMenu(self.menuFiles)
        self.menuFileImport.setObjectName("menuFileImport")
        self.menuFileExport = QtWidgets.QMenu(self.menuFiles)
        self.menuFileExport.setObjectName("menuFileExport")
        self.menuSimulation_Map_Build_Data = QtWidgets.QMenu(self.menuFileExport)
        self.menuSimulation_Map_Build_Data.setObjectName("menuSimulation_Map_Build_Data")
        self.menuFind = QtWidgets.QMenu(self.menubar)
        self.menuFind.setObjectName("menuFind")
        self.menuData_Integrity = QtWidgets.QMenu(self.menubar)
        self.menuData_Integrity.setObjectName("menuData_Integrity")
        self.menuNode_Integrity = QtWidgets.QMenu(self.menuData_Integrity)
        self.menuNode_Integrity.setObjectName("menuNode_Integrity")
        self.menuLink_Integrity = QtWidgets.QMenu(self.menuData_Integrity)
        self.menuLink_Integrity.setObjectName("menuLink_Integrity")
        self.menuFind_Closed_loop_Link = QtWidgets.QMenu(self.menuData_Integrity)
        self.menuFind_Closed_loop_Link.setObjectName("menuFind_Closed_loop_Link")
        self.menuData_Trimming = QtWidgets.QMenu(self.menubar)
        self.menuData_Trimming.setObjectName("menuData_Trimming")
        self.menuMisc = QtWidgets.QMenu(self.menubar)
        self.menuMisc.setObjectName("menuMisc")
        self.menuOpenDRIVE_Conversion = QtWidgets.QMenu(self.menubar)
        self.menuOpenDRIVE_Conversion.setObjectName("menuOpenDRIVE_Conversion")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuAdd_Scenario_Object = QtWidgets.QMenu(self.menuEdit)
        self.menuAdd_Scenario_Object.setObjectName("menuAdd_Scenario_Object")
        self.menuWorld_Settings = QtWidgets.QMenu(self.menubar)
        self.menuWorld_Settings.setObjectName("menuWorld_Settings")
        self.menuMap_Creation = QtWidgets.QMenu(self.menubar)
        self.menuMap_Creation.setObjectName("menuMap_Creation")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuLanelet2_Conversion = QtWidgets.QMenu(self.menubar)
        self.menuLanelet2_Conversion.setObjectName("menuLanelet2_Conversion")
        self.menuOpenScenario = QtWidgets.QMenu(self.menubar)
        self.menuOpenScenario.setObjectName("menuOpenScenario")
        MainWindow.setMenuBar(self.menubar)
        self.action_load_mgeo = QtWidgets.QAction(MainWindow)
        self.action_load_mgeo.setObjectName("action_load_mgeo")
        self.action_load_mscenario = QtWidgets.QAction(MainWindow)
        self.action_load_mscenario.setObjectName("action_load_mscenario")
        self.action_save_mgeo = QtWidgets.QAction(MainWindow)
        self.action_save_mgeo.setObjectName("action_save_mgeo")
        self.action_save_mscenario = QtWidgets.QAction(MainWindow)
        self.action_save_mscenario.setObjectName("action_save_mscenario")
        self.action_exit = QtWidgets.QAction(MainWindow)
        self.action_exit.setObjectName("action_exit")
        self.action_import_42dot = QtWidgets.QAction(MainWindow)
        self.action_import_42dot.setObjectName("action_import_42dot")
        self.action_export_odr = QtWidgets.QAction(MainWindow)
        self.action_export_odr.setObjectName("action_export_odr")
        self.action_export_csv = QtWidgets.QAction(MainWindow)
        self.action_export_csv.setObjectName("action_export_csv")
        self.action_export_obj = QtWidgets.QAction(MainWindow)
        self.action_export_obj.setObjectName("action_export_obj")
        self.actionXY = QtWidgets.QAction(MainWindow)
        self.actionXY.setObjectName("actionXY")
        self.actionYZ = QtWidgets.QAction(MainWindow)
        self.actionYZ.setObjectName("actionYZ")
        self.actionZX = QtWidgets.QAction(MainWindow)
        self.actionZX.setObjectName("actionZX")
        self.actionSoftware_Information = QtWidgets.QAction(MainWindow)
        self.actionSoftware_Information.setObjectName("actionSoftware_Information")
        self.action_node = QtWidgets.QAction(MainWindow)
        self.action_node.setObjectName("action_node")
        self.action_link = QtWidgets.QAction(MainWindow)
        self.action_link.setObjectName("action_link")
        self.action_repair_overlapped_node = QtWidgets.QAction(MainWindow)
        self.action_repair_overlapped_node.setObjectName("action_repair_overlapped_node")
        self.action_find_dangling_nodes = QtWidgets.QAction(MainWindow)
        self.action_find_dangling_nodes.setObjectName("action_find_dangling_nodes")
        self.action_delete_dangling_nodes = QtWidgets.QAction(MainWindow)
        self.action_delete_dangling_nodes.setObjectName("action_delete_dangling_nodes")
        self.action_find_dangling_links = QtWidgets.QAction(MainWindow)
        self.action_find_dangling_links.setObjectName("action_find_dangling_links")
        self.action_fix_dangling_links = QtWidgets.QAction(MainWindow)
        self.action_fix_dangling_links.setObjectName("action_fix_dangling_links")
        self.action_clear = QtWidgets.QAction(MainWindow)
        self.action_clear.setObjectName("action_clear")
        self.action_delete_Objects_out_of_XY_Range_soft = QtWidgets.QAction(MainWindow)
        self.action_delete_Objects_out_of_XY_Range_soft.setObjectName("action_delete_Objects_out_of_XY_Range_soft")
        self.action_delete_Objects_inside_this_Screen = QtWidgets.QAction(MainWindow)
        self.action_delete_Objects_inside_this_Screen.setObjectName("action_delete_Objects_inside_this_Screen")
        self.action_add_poly3 = QtWidgets.QAction(MainWindow)
        self.action_add_poly3.setObjectName("action_add_poly3")
        self.action_ts = QtWidgets.QAction(MainWindow)
        self.action_ts.setObjectName("action_ts")
        self.action_tl = QtWidgets.QAction(MainWindow)
        self.action_tl.setObjectName("action_tl")
        self.action_jct = QtWidgets.QAction(MainWindow)
        self.action_jct.setObjectName("action_jct")
        self.action_add_line = QtWidgets.QAction(MainWindow)
        self.action_add_line.setObjectName("action_add_line")
        self.action_delete_current_point = QtWidgets.QAction(MainWindow)
        self.action_delete_current_point.setObjectName("action_delete_current_point")
        self.action_delete_all_points = QtWidgets.QAction(MainWindow)
        self.action_delete_all_points.setObjectName("action_delete_all_points")
        self.actionMerge_Selected = QtWidgets.QAction(MainWindow)
        self.actionMerge_Selected.setObjectName("actionMerge_Selected")
        self.actionCreate_Junction = QtWidgets.QAction(MainWindow)
        self.actionCreate_Junction.setObjectName("actionCreate_Junction")
        self.actionDelete_Current_Junction = QtWidgets.QAction(MainWindow)
        self.actionDelete_Current_Junction.setObjectName("actionDelete_Current_Junction")
        self.action_create_road_objects = QtWidgets.QAction(MainWindow)
        self.action_create_road_objects.setObjectName("action_create_road_objects")
        self.action_create_junction = QtWidgets.QAction(MainWindow)
        self.action_create_junction.setObjectName("action_create_junction")
        self.action_delete_Objects_out_of_XY_Range_hard = QtWidgets.QAction(MainWindow)
        self.action_delete_Objects_out_of_XY_Range_hard.setObjectName("action_delete_Objects_out_of_XY_Range_hard")
        self.actionImport_NGII_Shp_Ver1_Node_Link = QtWidgets.QAction(MainWindow)
        self.actionImport_NGII_Shp_Ver1_Node_Link.setObjectName("actionImport_NGII_Shp_Ver1_Node_Link")
        self.actionImport_NGII_Shp_Ver1_Lane_Marking_Data = QtWidgets.QAction(MainWindow)
        self.actionImport_NGII_Shp_Ver1_Lane_Marking_Data.setObjectName("actionImport_NGII_Shp_Ver1_Lane_Marking_Data")
        self.actionImport_NGII_Shp_Ver2 = QtWidgets.QAction(MainWindow)
        self.actionImport_NGII_Shp_Ver2.setObjectName("actionImport_NGII_Shp_Ver2")
        self.actionImport_NGII_Shp_Ver2_Lane_Marking_Data = QtWidgets.QAction(MainWindow)
        self.actionImport_NGII_Shp_Ver2_Lane_Marking_Data.setObjectName("actionImport_NGII_Shp_Ver2_Lane_Marking_Data")
        self.actionSimulation_Map_Build_Data_All = QtWidgets.QAction(MainWindow)
        self.actionSimulation_Map_Build_Data_All.setObjectName("actionSimulation_Map_Build_Data_All")
        self.actionSimulation_Map_Build_Data_TS_only = QtWidgets.QAction(MainWindow)
        self.actionSimulation_Map_Build_Data_TS_only.setObjectName("actionSimulation_Map_Build_Data_TS_only")
        self.actionSimulation_Map_Build_Data_TL_only = QtWidgets.QAction(MainWindow)
        self.actionSimulation_Map_Build_Data_TL_only.setObjectName("actionSimulation_Map_Build_Data_TL_only")
        self.actionSimulation_Map_Build_Data_SM_only = QtWidgets.QAction(MainWindow)
        self.actionSimulation_Map_Build_Data_SM_only.setObjectName("actionSimulation_Map_Build_Data_SM_only")
        self.actionCreate_Lane_Change_Links = QtWidgets.QAction(MainWindow)
        self.actionCreate_Lane_Change_Links.setObjectName("actionCreate_Lane_Change_Links")
        self.actionFill_Points_in_Links = QtWidgets.QAction(MainWindow)
        self.actionFill_Points_in_Links.setObjectName("actionFill_Points_in_Links")
        self.actionChange_World_Origin = QtWidgets.QAction(MainWindow)
        self.actionChange_World_Origin.setObjectName("actionChange_World_Origin")
        self.action_save_mgeo_tlts = QtWidgets.QAction(MainWindow)
        self.action_save_mgeo_tlts.setObjectName("action_save_mgeo_tlts")
        self.actionFind = QtWidgets.QAction(MainWindow)
        self.actionFind.setObjectName("actionFind")
        self.action_road = QtWidgets.QAction(MainWindow)
        self.action_road.setObjectName("action_road")
        self.action_lane_mark = QtWidgets.QAction(MainWindow)
        self.action_lane_mark.setObjectName("action_lane_mark")
        self.action_find_single_crosswalk = QtWidgets.QAction(MainWindow)
        self.action_find_single_crosswalk.setObjectName("action_find_single_crosswalk")
        self.action_find_crosswalk = QtWidgets.QAction(MainWindow)
        self.action_find_crosswalk.setObjectName("action_find_crosswalk")
        self.action_change_ids_to_string = QtWidgets.QAction(MainWindow)
        self.action_change_ids_to_string.setObjectName("action_change_ids_to_string")
        self.actionCreate_Junction_2 = QtWidgets.QAction(MainWindow)
        self.actionCreate_Junction_2.setObjectName("actionCreate_Junction_2")
        self.action_create_preliminary_odr_roads = QtWidgets.QAction(MainWindow)
        self.action_create_preliminary_odr_roads.setObjectName("action_create_preliminary_odr_roads")
        self.action_clear_odr_roads = QtWidgets.QAction(MainWindow)
        self.action_clear_odr_roads.setObjectName("action_clear_odr_roads")
        self.action_create_odr_roads = QtWidgets.QAction(MainWindow)
        self.action_create_odr_roads.setObjectName("action_create_odr_roads")
        self.action_create_opendrive_no_signal = QtWidgets.QAction(MainWindow)
        self.action_create_opendrive_no_signal.setObjectName("action_create_opendrive_no_signal")
        self.action_create_opendrive = QtWidgets.QAction(MainWindow)
        self.action_create_opendrive.setObjectName("action_create_opendrive")
        self.action_create_opendrive_fix_all_signal_road_id = QtWidgets.QAction(MainWindow)
        self.action_create_opendrive_fix_all_signal_road_id.setObjectName("action_create_opendrive_fix_all_signal_road_id")
        self.action_create_road_objects_legacy = QtWidgets.QAction(MainWindow)
        self.action_create_road_objects_legacy.setObjectName("action_create_road_objects_legacy")
        self.action_create_opendrive_legacy = QtWidgets.QAction(MainWindow)
        self.action_create_opendrive_legacy.setObjectName("action_create_opendrive_legacy")
        self.action_divide_a_link_smart = QtWidgets.QAction(MainWindow)
        self.action_divide_a_link_smart.setObjectName("action_divide_a_link_smart")
        self.action_divide_a_link_keep_front = QtWidgets.QAction(MainWindow)
        self.action_divide_a_link_keep_front.setObjectName("action_divide_a_link_keep_front")
        self.action_divide_a_link_keep_rear = QtWidgets.QAction(MainWindow)
        self.action_divide_a_link_keep_rear.setObjectName("action_divide_a_link_keep_rear")
        self.action_set_new_road_id = QtWidgets.QAction(MainWindow)
        self.action_set_new_road_id.setObjectName("action_set_new_road_id")
        self.action_add_link_point = QtWidgets.QAction(MainWindow)
        self.action_add_link_point.setObjectName("action_add_link_point")
        self.action_merge_links = QtWidgets.QAction(MainWindow)
        self.action_merge_links.setObjectName("action_merge_links")
        self.action_connect_nodes = QtWidgets.QAction(MainWindow)
        self.action_connect_nodes.setObjectName("action_connect_nodes")
        self.action_gen_road_poly = QtWidgets.QAction(MainWindow)
        self.action_gen_road_poly.setObjectName("action_gen_road_poly")
        self.action_auto_generate_geometry_points = QtWidgets.QAction(MainWindow)
        self.action_auto_generate_geometry_points.setObjectName("action_auto_generate_geometry_points")
        self.action_get_position_in_carla = QtWidgets.QAction(MainWindow)
        self.action_get_position_in_carla.setObjectName("action_get_position_in_carla")
        self.action_import_txt = QtWidgets.QAction(MainWindow)
        self.action_import_txt.setObjectName("action_import_txt")
        self.action_import_stryx_geojson = QtWidgets.QAction(MainWindow)
        self.action_import_stryx_geojson.setObjectName("action_import_stryx_geojson")
        self.action_import_naver_geojson = QtWidgets.QAction(MainWindow)
        self.action_import_naver_geojson.setObjectName("action_import_naver_geojson")
        self.action_import_roadrunner = QtWidgets.QAction(MainWindow)
        self.action_import_roadrunner.setObjectName("action_import_roadrunner")
        self.action_import_OpenDRIVE = QtWidgets.QAction(MainWindow)
        self.action_import_OpenDRIVE.setObjectName("action_import_OpenDRIVE")
        self.actionImport_Stryx = QtWidgets.QAction(MainWindow)
        self.actionImport_Stryx.setObjectName("actionImport_Stryx")
        self.actionImport_Naver = QtWidgets.QAction(MainWindow)
        self.actionImport_Naver.setObjectName("actionImport_Naver")
        self.actionExport_Lane_Mesh = QtWidgets.QAction(MainWindow)
        self.actionExport_Lane_Mesh.setObjectName("actionExport_Lane_Mesh")
        self.actionExport_Road_Mesh = QtWidgets.QAction(MainWindow)
        self.actionExport_Road_Mesh.setObjectName("actionExport_Road_Mesh")
        self.action_simplify_lane = QtWidgets.QAction(MainWindow)
        self.action_simplify_lane.setObjectName("action_simplify_lane")
        self.action_fill_lane_point = QtWidgets.QAction(MainWindow)
        self.action_fill_lane_point.setObjectName("action_fill_lane_point")
        self.action_find_location_error_link = QtWidgets.QAction(MainWindow)
        self.action_find_location_error_link.setObjectName("action_find_location_error_link")
        self.action_reverse_link_points = QtWidgets.QAction(MainWindow)
        self.action_reverse_link_points.setObjectName("action_reverse_link_points")
        self.action_find_opposite_direction_link = QtWidgets.QAction(MainWindow)
        self.action_find_opposite_direction_link.setObjectName("action_find_opposite_direction_link")
        self.action_find_duplicated_link = QtWidgets.QAction(MainWindow)
        self.action_find_duplicated_link.setObjectName("action_find_duplicated_link")
        self.action_find_empty_related_signal_link = QtWidgets.QAction(MainWindow)
        self.action_find_empty_related_signal_link.setObjectName("action_find_empty_related_signal_link")
        self.actionImport_DeepMap = QtWidgets.QAction(MainWindow)
        self.actionImport_DeepMap.setObjectName("actionImport_DeepMap")
        self.actionImport_TomTom_avro = QtWidgets.QAction(MainWindow)
        self.actionImport_TomTom_avro.setObjectName("actionImport_TomTom_avro")
        self.actionImport_Civilmaps = QtWidgets.QAction(MainWindow)
        self.actionImport_Civilmaps.setObjectName("actionImport_Civilmaps")
        self.actionImport_Mobiltech = QtWidgets.QAction(MainWindow)
        self.actionImport_Mobiltech.setObjectName("actionImport_Mobiltech")
        self.actionImport_TomTom_shp = QtWidgets.QAction(MainWindow)
        self.actionImport_TomTom_shp.setObjectName("actionImport_TomTom_shp")
        self.actionImport_TomTom_geojson = QtWidgets.QAction(MainWindow)
        self.actionImport_TomTom_geojson.setObjectName("actionImport_TomTom_geojson")
        self.action_find_concave_polygon = QtWidgets.QAction(MainWindow)
        self.action_find_concave_polygon.setObjectName("action_find_concave_polygon")
        self.action_repair_concave_polygon = QtWidgets.QAction(MainWindow)
        self.action_repair_concave_polygon.setObjectName("action_repair_concave_polygon")
        self.action_find_junction_error = QtWidgets.QAction(MainWindow)
        self.action_find_junction_error.setObjectName("action_find_junction_error")
        self.action_repair_junction_error_incoming = QtWidgets.QAction(MainWindow)
        self.action_repair_junction_error_incoming.setObjectName("action_repair_junction_error_incoming")
        self.action_repair_junction_error_split = QtWidgets.QAction(MainWindow)
        self.action_repair_junction_error_split.setObjectName("action_repair_junction_error_split")
        self.actionChange_World_Projection = QtWidgets.QAction(MainWindow)
        self.actionChange_World_Projection.setObjectName("actionChange_World_Projection")
        self.actionChange_Workspace_Origin = QtWidgets.QAction(MainWindow)
        self.actionChange_Workspace_Origin.setObjectName("actionChange_Workspace_Origin")
        self.actionUser_Manual = QtWidgets.QAction(MainWindow)
        self.actionUser_Manual.setObjectName("actionUser_Manual")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionGeoJSON_geojson = QtWidgets.QAction(MainWindow)
        self.actionGeoJSON_geojson.setObjectName("actionGeoJSON_geojson")
        self.actionImport = QtWidgets.QAction(MainWindow)
        self.actionImport.setObjectName("actionImport")
        self.actionTest = QtWidgets.QAction(MainWindow)
        self.actionTest.setObjectName("actionTest")
        self.actionChange_Region_Localization = QtWidgets.QAction(MainWindow)
        self.actionChange_Region_Localization.setObjectName("actionChange_Region_Localization")
        self.actionUndo = QtWidgets.QAction(MainWindow)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtWidgets.QAction(MainWindow)
        self.actionRedo.setObjectName("actionRedo")
        self.action_find_duplicated_lane = QtWidgets.QAction(MainWindow)
        self.action_find_duplicated_lane.setObjectName("action_find_duplicated_lane")
        self.action_fix_road_id_assignments = QtWidgets.QAction(MainWindow)
        self.action_fix_road_id_assignments.setObjectName("action_fix_road_id_assignments")
        self.action_find_missing_Lane_Marking = QtWidgets.QAction(MainWindow)
        self.action_find_missing_Lane_Marking.setObjectName("action_find_missing_Lane_Marking")
        self.action_delete_all_points_all = QtWidgets.QAction(MainWindow)
        self.action_delete_all_points_all.setObjectName("action_delete_all_points_all")
        self.action_convert_lanelet2 = QtWidgets.QAction(MainWindow)
        self.action_convert_lanelet2.setObjectName("action_convert_lanelet2")
        self.action_import_open_scenario = QtWidgets.QAction(MainWindow)
        self.action_import_open_scenario.setObjectName("action_import_open_scenario")
        self.actionDelete_Lane_Change_Links = QtWidgets.QAction(MainWindow)
        self.actionDelete_Lane_Change_Links.setObjectName("actionDelete_Lane_Change_Links")
        self.action_find_end_nodes = QtWidgets.QAction(MainWindow)
        self.action_find_end_nodes.setObjectName("action_find_end_nodes")
        self.actionStart_Scenario = QtWidgets.QAction(MainWindow)
        self.actionStart_Scenario.setObjectName("actionStart_Scenario")
        self.actionStop_Scenario = QtWidgets.QAction(MainWindow)
        self.actionStop_Scenario.setObjectName("actionStop_Scenario")
        self.actionCreate_Path_from_Selected_Links = QtWidgets.QAction(MainWindow)
        self.actionCreate_Path_from_Selected_Links.setObjectName("actionCreate_Path_from_Selected_Links")
        self.actionCreate_Path_from_Start_End_Points = QtWidgets.QAction(MainWindow)
        self.actionCreate_Path_from_Start_End_Points.setObjectName("actionCreate_Path_from_Start_End_Points")
        self.actionReset_Path = QtWidgets.QAction(MainWindow)
        self.actionReset_Path.setObjectName("actionReset_Path")
        self.actionReset_Start_Points = QtWidgets.QAction(MainWindow)
        self.actionReset_Start_Points.setObjectName("actionReset_Start_Points")
        self.actionReset_End_Point = QtWidgets.QAction(MainWindow)
        self.actionReset_End_Point.setObjectName("actionReset_End_Point")
        self.action_export_path_csv = QtWidgets.QAction(MainWindow)
        self.action_export_path_csv.setObjectName("action_export_path_csv")
        self.actionCreate_Path_from_Start_Stop_End_Points = QtWidgets.QAction(MainWindow)
        self.actionCreate_Path_from_Start_Stop_End_Points.setObjectName("actionCreate_Path_from_Start_Stop_End_Points")
        self.actionReset_Stop_Point = QtWidgets.QAction(MainWindow)
        self.actionReset_Stop_Point.setObjectName("actionReset_Stop_Point")
        self.actionReset_All = QtWidgets.QAction(MainWindow)
        self.actionReset_All.setObjectName("actionReset_All")
        self.action_find_lane_change_mismatch = QtWidgets.QAction(MainWindow)
        self.action_find_lane_change_mismatch.setObjectName("action_find_lane_change_mismatch")
        self.action_repair_short_link = QtWidgets.QAction(MainWindow)
        self.action_repair_short_link.setObjectName("action_repair_short_link")
        self.action_find_short_link = QtWidgets.QAction(MainWindow)
        self.action_find_short_link.setObjectName("action_find_short_link")
        self.action_add_mgeo = QtWidgets.QAction(MainWindow)
        self.action_add_mgeo.setObjectName("action_add_mgeo")
        self.actionChange_NGII_map_to_MGeo = QtWidgets.QAction(MainWindow)
        self.actionChange_NGII_map_to_MGeo.setObjectName("actionChange_NGII_map_to_MGeo")
        self.action_fix_signal_road_connection = QtWidgets.QAction(MainWindow)
        self.action_fix_signal_road_connection.setObjectName("action_fix_signal_road_connection")
        self.actionExport_Structure_Mesh = QtWidgets.QAction(MainWindow)
        self.actionExport_Structure_Mesh.setObjectName("actionExport_Structure_Mesh")
        self.action_import_Lanelet2 = QtWidgets.QAction(MainWindow)
        self.action_import_Lanelet2.setObjectName("action_import_Lanelet2")
        self.action_find_intersecting_links = QtWidgets.QAction(MainWindow)
        self.action_find_intersecting_links.setObjectName("action_find_intersecting_links")
        self.actionCheck_Intersection_Vicinity = QtWidgets.QAction(MainWindow)
        self.actionCheck_Intersection_Vicinity.setObjectName("actionCheck_Intersection_Vicinity")
        self.actionMake_Intersection_TL = QtWidgets.QAction(MainWindow)
        self.actionMake_Intersection_TL.setObjectName("actionMake_Intersection_TL")
        self.actionImport_RAD_R = QtWidgets.QAction(MainWindow)
        self.actionImport_RAD_R.setObjectName("actionImport_RAD_R")
        self.actionAdd_Max_Speed = QtWidgets.QAction(MainWindow)
        self.actionAdd_Max_Speed.setObjectName("actionAdd_Max_Speed")
        self.menuFind_Overlapped_Node_2 = QtWidgets.QAction(MainWindow)
        self.menuFind_Overlapped_Node_2.setObjectName("menuFind_Overlapped_Node_2")
        self.action_find_overlapped_node_ = QtWidgets.QAction(MainWindow)
        self.action_find_overlapped_node_.setObjectName("action_find_overlapped_node_")
        self.actionFind_Dnaling_Link = QtWidgets.QAction(MainWindow)
        self.actionFind_Dnaling_Link.setObjectName("actionFind_Dnaling_Link")
        self.action_set_max_speed_link = QtWidgets.QAction(MainWindow)
        self.action_set_max_speed_link.setObjectName("action_set_max_speed_link")
        self.action_load_openscenario = QtWidgets.QAction(MainWindow)
        self.action_load_openscenario.setObjectName("action_load_openscenario")
        self.actionImport_MGeo_geojson = QtWidgets.QAction(MainWindow)
        self.actionImport_MGeo_geojson.setObjectName("actionImport_MGeo_geojson")
        self.action_find_road_polygon = QtWidgets.QAction(MainWindow)
        self.action_find_road_polygon.setObjectName("action_find_road_polygon")
        self.action_run_with_esmini = QtWidgets.QAction(MainWindow)
        self.action_run_with_esmini.setObjectName("action_run_with_esmini")
        self.actionOICD_oicd = QtWidgets.QAction(MainWindow)
        self.actionOICD_oicd.setObjectName("actionOICD_oicd")
        self.action_repair_closed_loop_Link = QtWidgets.QAction(MainWindow)
        self.action_repair_closed_loop_Link.setObjectName("action_repair_closed_loop_Link")
        self.action_find_closed_loop_link = QtWidgets.QAction(MainWindow)
        self.action_find_closed_loop_link.setObjectName("action_find_closed_loop_link")
        self.action_delete_closed_loop_link = QtWidgets.QAction(MainWindow)
        self.action_delete_closed_loop_link.setObjectName("action_delete_closed_loop_link")
        self.actionffff = QtWidgets.QAction(MainWindow)
        self.actionffff.setObjectName("actionffff")
        self.actionMerge_MGeo = QtWidgets.QAction(MainWindow)
        self.actionMerge_MGeo.setObjectName("actionMerge_MGeo")
        self.actionApollo_OpenDRIVE_xml = QtWidgets.QAction(MainWindow)
        self.actionApollo_OpenDRIVE_xml.setObjectName("actionApollo_OpenDRIVE_xml")
        self.action_save_openscenario = QtWidgets.QAction(MainWindow)
        self.action_save_openscenario.setObjectName("action_save_openscenario")
        self.action_Cal_direction_of_the_traffic_signals = QtWidgets.QAction(MainWindow)
        self.action_Cal_direction_of_the_traffic_signals.setObjectName("action_Cal_direction_of_the_traffic_signals")
        self.action_add_vehicle = QtWidgets.QAction(MainWindow)
        self.action_add_vehicle.setObjectName("action_add_vehicle")
        self.action_add_pedestrian = QtWidgets.QAction(MainWindow)
        self.action_add_pedestrian.setObjectName("action_add_pedestrian")
        self.action_add_misc_object = QtWidgets.QAction(MainWindow)
        self.action_add_misc_object.setObjectName("action_add_misc_object")
        self.action_auto_create_junction = QtWidgets.QAction(MainWindow)
        self.action_auto_create_junction.setObjectName("action_auto_create_junction")
        self.action_add_event = QtWidgets.QAction(MainWindow)
        self.action_add_event.setObjectName("action_add_event")
        self.action_new_scenario = QtWidgets.QAction(MainWindow)
        self.action_new_scenario.setObjectName("action_new_scenario")
        self.actionFind_Stop_Line_Nodes = QtWidgets.QAction(MainWindow)
        self.actionFind_Stop_Line_Nodes.setObjectName("actionFind_Stop_Line_Nodes")
        self.actionFind_Related_Signal_Error = QtWidgets.QAction(MainWindow)
        self.actionFind_Related_Signal_Error.setObjectName("actionFind_Related_Signal_Error")
        self.actionKakaomobility = QtWidgets.QAction(MainWindow)
        self.actionKakaomobility.setObjectName("actionKakaomobility")
        self.menuFileImport.addAction(self.actionImport_MGeo_geojson)
        self.menuFileImport.addSeparator()
        self.menuFileImport.addAction(self.action_import_OpenDRIVE)
        self.menuFileImport.addAction(self.action_import_Lanelet2)
        self.menuFileImport.addSeparator()
        self.menuFileImport.addAction(self.action_import_txt)
        self.menuFileImport.addSeparator()
        self.menuFileImport.addAction(self.action_import_roadrunner)
        self.menuFileImport.addSeparator()
        self.menuFileImport.addAction(self.actionImport_TomTom_avro)
        self.menuFileImport.addAction(self.actionImport_TomTom_shp)
        self.menuFileImport.addAction(self.actionImport_TomTom_geojson)
        self.menuFileImport.addSeparator()
        self.menuFileImport.addAction(self.actionImport_NGII_Shp_Ver1_Lane_Marking_Data)
        self.menuFileImport.addAction(self.actionImport_NGII_Shp_Ver2_Lane_Marking_Data)
        self.menuFileImport.addSeparator()
        self.menuFileImport.addAction(self.actionImport_RAD_R)
        self.menuFileImport.addSeparator()
        self.menuFileImport.addAction(self.action_import_42dot)
        self.menuFileImport.addAction(self.actionImport_Stryx)
        self.menuFileImport.addAction(self.actionImport_Naver)
        self.menuFileImport.addAction(self.actionImport_DeepMap)
        self.menuFileImport.addAction(self.actionImport_Civilmaps)
        self.menuFileImport.addAction(self.actionImport_Mobiltech)
        self.menuFileImport.addAction(self.actionKakaomobility)
        self.menuSimulation_Map_Build_Data.addAction(self.actionExport_Lane_Mesh)
        self.menuSimulation_Map_Build_Data.addAction(self.actionExport_Road_Mesh)
        self.menuSimulation_Map_Build_Data.addAction(self.actionExport_Structure_Mesh)
        self.menuSimulation_Map_Build_Data.addAction(self.actionSimulation_Map_Build_Data_TS_only)
        self.menuSimulation_Map_Build_Data.addAction(self.actionSimulation_Map_Build_Data_TL_only)
        self.menuSimulation_Map_Build_Data.addAction(self.actionSimulation_Map_Build_Data_SM_only)
        self.menuFileExport.addAction(self.action_export_odr)
        self.menuFileExport.addAction(self.actionApollo_OpenDRIVE_xml)
        self.menuFileExport.addAction(self.action_export_csv)
        self.menuFileExport.addAction(self.action_export_obj)
        self.menuFileExport.addSeparator()
        self.menuFileExport.addAction(self.actionGeoJSON_geojson)
        self.menuFileExport.addAction(self.action_export_path_csv)
        self.menuFileExport.addAction(self.actionOICD_oicd)
        self.menuFileExport.addSeparator()
        self.menuFileExport.addAction(self.menuSimulation_Map_Build_Data.menuAction())
        self.menuFiles.addAction(self.action_new_scenario)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.action_load_mgeo)
        self.menuFiles.addAction(self.action_load_mscenario)
        self.menuFiles.addAction(self.action_load_openscenario)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.action_save_mgeo)
        self.menuFiles.addAction(self.action_save_mscenario)
        self.menuFiles.addAction(self.action_save_openscenario)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.action_add_mgeo)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.menuFileImport.menuAction())
        self.menuFiles.addAction(self.menuFileExport.menuAction())
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.actionMerge_MGeo)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.action_exit)
        self.menuFind.addAction(self.actionFind)
        self.menuFind.addAction(self.action_node)
        self.menuFind.addAction(self.action_link)
        self.menuFind.addAction(self.action_ts)
        self.menuFind.addAction(self.action_tl)
        self.menuFind.addAction(self.action_jct)
        self.menuFind.addAction(self.action_road)
        self.menuFind.addAction(self.action_lane_mark)
        self.menuFind.addAction(self.action_find_single_crosswalk)
        self.menuFind.addAction(self.action_find_crosswalk)
        self.menuFind.addAction(self.action_find_road_polygon)
        self.menuNode_Integrity.addAction(self.action_find_overlapped_node_)
        self.menuNode_Integrity.addAction(self.action_repair_overlapped_node)
        self.menuNode_Integrity.addAction(self.action_find_dangling_nodes)
        self.menuNode_Integrity.addAction(self.action_delete_dangling_nodes)
        self.menuNode_Integrity.addAction(self.action_find_end_nodes)
        self.menuNode_Integrity.addAction(self.actionFind_Stop_Line_Nodes)
        self.menuLink_Integrity.addAction(self.action_find_dangling_links)
        self.menuLink_Integrity.addAction(self.action_fix_dangling_links)
        self.menuLink_Integrity.addAction(self.action_find_location_error_link)
        self.menuLink_Integrity.addAction(self.action_find_opposite_direction_link)
        self.menuLink_Integrity.addAction(self.action_find_duplicated_link)
        self.menuLink_Integrity.addAction(self.action_find_empty_related_signal_link)
        self.menuLink_Integrity.addAction(self.actionCheck_Intersection_Vicinity)
        self.menuLink_Integrity.addAction(self.action_set_max_speed_link)
        self.menuFind_Closed_loop_Link.addAction(self.action_find_closed_loop_link)
        self.menuFind_Closed_loop_Link.addAction(self.action_delete_closed_loop_link)
        self.menuData_Integrity.addAction(self.menuNode_Integrity.menuAction())
        self.menuData_Integrity.addAction(self.menuLink_Integrity.menuAction())
        self.menuData_Integrity.addAction(self.action_fix_signal_road_connection)
        self.menuData_Integrity.addSeparator()
        self.menuData_Integrity.addAction(self.menuFind_Closed_loop_Link.menuAction())
        self.menuData_Integrity.addSeparator()
        self.menuData_Integrity.addAction(self.action_find_junction_error)
        self.menuData_Integrity.addAction(self.action_repair_junction_error_split)
        self.menuData_Integrity.addAction(self.action_repair_junction_error_incoming)
        self.menuData_Integrity.addSeparator()
        self.menuData_Integrity.addAction(self.action_find_concave_polygon)
        self.menuData_Integrity.addAction(self.action_repair_concave_polygon)
        self.menuData_Integrity.addSeparator()
        self.menuData_Integrity.addAction(self.action_find_duplicated_lane)
        self.menuData_Integrity.addAction(self.action_find_lane_change_mismatch)
        self.menuData_Integrity.addSeparator()
        self.menuData_Integrity.addAction(self.action_fix_road_id_assignments)
        self.menuData_Integrity.addAction(self.action_find_missing_Lane_Marking)
        self.menuData_Integrity.addSeparator()
        self.menuData_Integrity.addAction(self.action_find_short_link)
        self.menuData_Integrity.addAction(self.action_repair_short_link)
        self.menuData_Integrity.addSeparator()
        self.menuData_Integrity.addAction(self.action_find_intersecting_links)
        self.menuData_Integrity.addAction(self.actionChange_NGII_map_to_MGeo)
        self.menuData_Integrity.addAction(self.actionMake_Intersection_TL)
        self.menuData_Integrity.addSeparator()
        self.menuData_Integrity.addAction(self.action_clear)
        self.menuData_Trimming.addAction(self.action_delete_Objects_out_of_XY_Range_soft)
        self.menuData_Trimming.addAction(self.action_delete_Objects_out_of_XY_Range_hard)
        self.menuData_Trimming.addAction(self.action_delete_Objects_inside_this_Screen)
        self.menuData_Trimming.addAction(self.actionAdd_Max_Speed)
        self.menuMisc.addAction(self.action_get_position_in_carla)
        self.menuMisc.addSeparator()
        self.menuMisc.addAction(self.action_change_ids_to_string)
        self.menuOpenDRIVE_Conversion.addAction(self.action_create_junction)
        self.menuOpenDRIVE_Conversion.addAction(self.action_auto_create_junction)
        self.menuOpenDRIVE_Conversion.addSeparator()
        self.menuOpenDRIVE_Conversion.addAction(self.action_add_line)
        self.menuOpenDRIVE_Conversion.addAction(self.action_add_poly3)
        self.menuOpenDRIVE_Conversion.addSeparator()
        self.menuOpenDRIVE_Conversion.addAction(self.action_auto_generate_geometry_points)
        self.menuOpenDRIVE_Conversion.addSeparator()
        self.menuOpenDRIVE_Conversion.addAction(self.action_delete_current_point)
        self.menuOpenDRIVE_Conversion.addAction(self.action_delete_all_points)
        self.menuOpenDRIVE_Conversion.addAction(self.action_delete_all_points_all)
        self.menuOpenDRIVE_Conversion.addSeparator()
        self.menuOpenDRIVE_Conversion.addAction(self.action_create_preliminary_odr_roads)
        self.menuOpenDRIVE_Conversion.addAction(self.action_create_odr_roads)
        self.menuOpenDRIVE_Conversion.addSeparator()
        self.menuOpenDRIVE_Conversion.addAction(self.action_clear_odr_roads)
        self.menuOpenDRIVE_Conversion.addSeparator()
        self.menuOpenDRIVE_Conversion.addAction(self.action_create_opendrive)
        self.menuOpenDRIVE_Conversion.addAction(self.action_run_with_esmini)
        self.menuAdd_Scenario_Object.addAction(self.action_add_vehicle)
        self.menuAdd_Scenario_Object.addAction(self.action_add_pedestrian)
        self.menuAdd_Scenario_Object.addAction(self.action_add_misc_object)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.action_divide_a_link_smart)
        self.menuEdit.addAction(self.action_divide_a_link_keep_front)
        self.menuEdit.addAction(self.action_divide_a_link_keep_rear)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.action_set_new_road_id)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.action_add_link_point)
        self.menuEdit.addAction(self.action_reverse_link_points)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.action_merge_links)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.action_connect_nodes)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.action_gen_road_poly)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.menuAdd_Scenario_Object.menuAction())
        self.menuEdit.addAction(self.action_add_event)
        self.menuWorld_Settings.addAction(self.actionChange_World_Projection)
        self.menuWorld_Settings.addAction(self.actionChange_World_Origin)
        self.menuWorld_Settings.addSeparator()
        self.menuWorld_Settings.addAction(self.actionChange_Workspace_Origin)
        self.menuWorld_Settings.addSeparator()
        self.menuWorld_Settings.addAction(self.actionChange_Region_Localization)
        self.menuWorld_Settings.addSeparator()
        self.menuMap_Creation.addAction(self.actionCreate_Lane_Change_Links)
        self.menuMap_Creation.addAction(self.actionDelete_Lane_Change_Links)
        self.menuMap_Creation.addSeparator()
        self.menuMap_Creation.addAction(self.actionFill_Points_in_Links)
        self.menuMap_Creation.addSeparator()
        self.menuMap_Creation.addAction(self.action_fill_lane_point)
        self.menuMap_Creation.addAction(self.action_simplify_lane)
        self.menuMap_Creation.addSeparator()
        self.menuMap_Creation.addAction(self.action_Cal_direction_of_the_traffic_signals)
        self.menuHelp.addAction(self.actionUser_Manual)
        self.menuHelp.addAction(self.actionAbout)
        self.menuLanelet2_Conversion.addAction(self.action_convert_lanelet2)
        self.menuOpenScenario.addAction(self.actionStart_Scenario)
        self.menuOpenScenario.addAction(self.actionStop_Scenario)
        self.menuOpenScenario.addSeparator()
        self.menuOpenScenario.addAction(self.actionCreate_Path_from_Selected_Links)
        self.menuOpenScenario.addAction(self.actionCreate_Path_from_Start_End_Points)
        self.menuOpenScenario.addAction(self.actionCreate_Path_from_Start_Stop_End_Points)
        self.menuOpenScenario.addSeparator()
        self.menuOpenScenario.addAction(self.actionReset_All)
        self.menuOpenScenario.addAction(self.actionReset_Path)
        self.menuOpenScenario.addSeparator()
        self.menuOpenScenario.addAction(self.actionReset_Start_Points)
        self.menuOpenScenario.addAction(self.actionReset_Stop_Point)
        self.menuOpenScenario.addAction(self.actionReset_End_Point)
        self.menubar.addAction(self.menuFiles.menuAction())
        self.menubar.addAction(self.menuFind.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuOpenDRIVE_Conversion.menuAction())
        self.menubar.addAction(self.menuData_Trimming.menuAction())
        self.menubar.addAction(self.menuData_Integrity.menuAction())
        self.menubar.addAction(self.menuWorld_Settings.menuAction())
        self.menubar.addAction(self.menuMap_Creation.menuAction())
        self.menubar.addAction(self.menuMisc.menuAction())
        self.menubar.addAction(self.menuOpenScenario.menuAction())
        self.menubar.addAction(self.menuLanelet2_Conversion.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.property_simulation_tab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.treeWidget_data.headerItem().setText(0, _translate("MainWindow", "Data View"))
        self.treeWidget_style.headerItem().setText(0, _translate("MainWindow", "Display Style"))
        self.rbtn_view_select.setText(_translate("MainWindow", "Select"))
        self.rbtn_view_trans.setText(_translate("MainWindow", "Translate"))
        self.rbtn_view_rotate.setText(_translate("MainWindow", "Rotate"))
        self.btn_view_xy.setText(_translate("MainWindow", "See East"))
        self.btn_view_yz.setText(_translate("MainWindow", "See North"))
        self.btn_view_zx.setText(_translate("MainWindow", "See West"))
        self.btn_view_south.setText(_translate("MainWindow", "See South"))
        self.label_camera_speed.setText(_translate("MainWindow", "Camera Speed"))
        self.reset_camera_speed.setText(_translate("MainWindow", "Reset"))
        self.label_x.setText(_translate("MainWindow", "Ground Level View"))
        self.label.setText(_translate("MainWindow", "Bird Eye View"))
        self.reset_xRot.setText(_translate("MainWindow", "Reset"))
        self.label_z.setText(_translate("MainWindow", "S<-W<-N"))
        self.label_2.setText(_translate("MainWindow", "N->E->S"))
        self.reset_zRot.setText(_translate("MainWindow", "Reset"))
        self.label_east.setText(_translate("MainWindow", "East"))
        self.label_north.setText(_translate("MainWindow", "North"))
        self.label_up.setText(_translate("MainWindow", "Up(Zoom Level)"))
        self.reset_up.setText(_translate("MainWindow", "Reset View"))
        self.label_range_x.setText(_translate("MainWindow", "TextLabel"))
        self.label_range_y.setText(_translate("MainWindow", "TextLabel"))
        self.label_zoom.setText(_translate("MainWindow", "TextLabel"))
        self.treeWidget_attr.headerItem().setText(0, _translate("MainWindow", "Data Editor"))
        self.property_simulation_tab.setTabText(self.property_simulation_tab.indexOf(self.property_tab), _translate("MainWindow", "Property"))
        self.btn_load_test_suite.setText(_translate("MainWindow", "Load Test Suite"))
        self.btn_save_test_suite.setText(_translate("MainWindow", "Save Test Suite"))
        self.btn_add_batch_scenario.setText(_translate("MainWindow", "Add"))
        self.btn_del_batch_scenario.setText(_translate("MainWindow", "Delete"))
        self.btn_upward_batch_scenario.setText(_translate("MainWindow", "↑"))
        self.btn_downward_batch_scenario.setText(_translate("MainWindow", "↓"))
        self.btn_select_all_batch_scenario.setText(_translate("MainWindow", "Select All"))
        self.btn_start_batch_scenario.setToolTip(_translate("MainWindow", "Start a batch simulation for selected scenarios"))
        self.btn_start_batch_scenario.setText(_translate("MainWindow", "Start Simulation"))
        self.btn_stop_batch_scenario.setToolTip(_translate("MainWindow", "Stop running batch simulation"))
        self.btn_stop_batch_scenario.setText(_translate("MainWindow", "Stop Simulation"))
        self.btn_skip_batch_scenario.setToolTip(_translate("MainWindow", "Skip current scenario"))
        self.btn_skip_batch_scenario.setText(_translate("MainWindow", "→|"))
        item = self.table_batch_scenario.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "No."))
        item = self.table_batch_scenario.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "File name"))
        item = self.table_batch_scenario.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Map name"))
        item = self.table_batch_scenario.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Description"))
        self.property_simulation_tab.setTabText(self.property_simulation_tab.indexOf(self.batch_simulation_tab), _translate("MainWindow", "Batch Simulation"))
        self.text_total_num.setText(_translate("MainWindow", "Total : "))
        self.text_succeeded_colon.setText(_translate("MainWindow", " :"))
        self.text_failed_colon.setText(_translate("MainWindow", " :"))
        self.text_none_colon.setText(_translate("MainWindow", " :"))
        self.btn_simulation_result_clear.setText(_translate("MainWindow", "Clear"))
        item = self.table_simulation_result_list.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "File Name"))
        item = self.table_simulation_result_list.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Map Name"))
        item = self.table_simulation_result_list.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Duration (sec)"))
        item = self.table_simulation_result.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Detailed Summary of the Simulation"))
        self.simulation_result_progress_bar.setFormat(_translate("MainWindow", "%v/%m"))
        self.btn_open_log_folder.setText(_translate("MainWindow", "Open Log Folder"))
        self.property_simulation_tab.setTabText(self.property_simulation_tab.indexOf(self.simulation_result_tab), _translate("MainWindow", "Simulation Result"))
        self.menuFiles.setTitle(_translate("MainWindow", "File"))
        self.menuFileImport.setTitle(_translate("MainWindow", "Import"))
        self.menuFileExport.setTitle(_translate("MainWindow", "Export"))
        self.menuSimulation_Map_Build_Data.setTitle(_translate("MainWindow", "Simulation Map Build Data"))
        self.menuFind.setTitle(_translate("MainWindow", "Find"))
        self.menuData_Integrity.setTitle(_translate("MainWindow", "Data Integrity"))
        self.menuNode_Integrity.setTitle(_translate("MainWindow", "Node Integrity"))
        self.menuLink_Integrity.setTitle(_translate("MainWindow", "Link Integrity"))
        self.menuFind_Closed_loop_Link.setTitle(_translate("MainWindow", "Find Closed-loop Link"))
        self.menuData_Trimming.setTitle(_translate("MainWindow", "Data Trimming"))
        self.menuMisc.setTitle(_translate("MainWindow", "Misc"))
        self.menuOpenDRIVE_Conversion.setTitle(_translate("MainWindow", "OpenDRIVE Conversion"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuAdd_Scenario_Object.setTitle(_translate("MainWindow", "Add Scenario Objects"))
        self.menuWorld_Settings.setTitle(_translate("MainWindow", "World Settings"))
        self.menuMap_Creation.setTitle(_translate("MainWindow", "Map Creation"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuLanelet2_Conversion.setTitle(_translate("MainWindow", "Lanelet2 Conversion"))
        self.menuOpenScenario.setTitle(_translate("MainWindow", "Run"))
        self.action_load_mgeo.setText(_translate("MainWindow", "Load MGeo"))
        self.action_load_mscenario.setText(_translate("MainWindow", "Load MScenario"))
        self.action_save_mgeo.setText(_translate("MainWindow", "Save MGeo"))
        self.action_save_mscenario.setText(_translate("MainWindow", "Save MScenario"))
        self.action_exit.setText(_translate("MainWindow", "Exit"))
        self.action_import_42dot.setText(_translate("MainWindow", "42dot"))
        self.action_export_odr.setText(_translate("MainWindow", "OpenDRIVE (.xodr)"))
        self.action_export_csv.setText(_translate("MainWindow", "CSV File (.csv)"))
        self.action_export_obj.setText(_translate("MainWindow", "Wavefront (.obj)"))
        self.actionXY.setText(_translate("MainWindow", "XY"))
        self.actionYZ.setText(_translate("MainWindow", "YZ"))
        self.actionZX.setText(_translate("MainWindow", "ZX"))
        self.actionSoftware_Information.setText(_translate("MainWindow", "Software Information"))
        self.action_node.setText(_translate("MainWindow", "Node"))
        self.action_link.setText(_translate("MainWindow", "Link"))
        self.action_repair_overlapped_node.setText(_translate("MainWindow", "Repair Overlapped Node"))
        self.action_find_dangling_nodes.setText(_translate("MainWindow", "Find Dangling Nodes"))
        self.action_delete_dangling_nodes.setText(_translate("MainWindow", "Delete Dangling Node"))
        self.action_find_dangling_links.setText(_translate("MainWindow", "Find Dangling Link "))
        self.action_fix_dangling_links.setText(_translate("MainWindow", "Fix Dangling Link"))
        self.action_clear.setText(_translate("MainWindow", "Clear"))
        self.action_delete_Objects_out_of_XY_Range_soft.setText(_translate("MainWindow", "Delete Objects out of Current View (soft)"))
        self.action_delete_Objects_inside_this_Screen.setText(_translate("MainWindow", "Delete Objects in Current View"))
        self.action_add_poly3.setText(_translate("MainWindow", "Add Poly3 Geometry Point"))
        self.action_ts.setText(_translate("MainWindow", "Traffic Sign"))
        self.action_tl.setText(_translate("MainWindow", "Traffic Light"))
        self.action_jct.setText(_translate("MainWindow", "Junction"))
        self.action_add_line.setText(_translate("MainWindow", "Add Line Geometry Point"))
        self.action_delete_current_point.setText(_translate("MainWindow", "Delete Current Point"))
        self.action_delete_all_points.setText(_translate("MainWindow", "Delete All Points (Line)"))
        self.actionMerge_Selected.setText(_translate("MainWindow", "Merge Selected Links"))
        self.actionCreate_Junction.setText(_translate("MainWindow", "Create Junction"))
        self.actionDelete_Current_Junction.setText(_translate("MainWindow", "Delete Current Junction"))
        self.action_create_road_objects.setText(_translate("MainWindow", "Create Road Objects"))
        self.action_create_junction.setText(_translate("MainWindow", "Create Junction"))
        self.action_delete_Objects_out_of_XY_Range_hard.setText(_translate("MainWindow", "Delete Objects out of Current View (hard)"))
        self.actionImport_NGII_Shp_Ver1_Node_Link.setText(_translate("MainWindow", "Import NGII Shp Ver1"))
        self.actionImport_NGII_Shp_Ver1_Lane_Marking_Data.setText(_translate("MainWindow", "NGII Shp Ver1"))
        self.actionImport_NGII_Shp_Ver2.setText(_translate("MainWindow", "NGII Shp Ver2"))
        self.actionImport_NGII_Shp_Ver2_Lane_Marking_Data.setText(_translate("MainWindow", "NGII Shp Ver2"))
        self.actionSimulation_Map_Build_Data_All.setText(_translate("MainWindow", "Simulation Map Build Data (All)"))
        self.actionSimulation_Map_Build_Data_TS_only.setText(_translate("MainWindow", "Traffic Sign"))
        self.actionSimulation_Map_Build_Data_TL_only.setText(_translate("MainWindow", "Traffic Light"))
        self.actionSimulation_Map_Build_Data_SM_only.setText(_translate("MainWindow", "Surface Mark"))
        self.actionCreate_Lane_Change_Links.setText(_translate("MainWindow", "Create Lane Change Links"))
        self.actionFill_Points_in_Links.setText(_translate("MainWindow", "Fill Points in Links"))
        self.actionChange_World_Origin.setText(_translate("MainWindow", "Change World Origin"))
        self.action_save_mgeo_tlts.setText(_translate("MainWindow", "Save MGeo(TL/TS)"))
        self.actionFind.setText(_translate("MainWindow", "Find (From All Primitives)"))
        self.action_road.setText(_translate("MainWindow", "Road"))
        self.action_lane_mark.setText(_translate("MainWindow", "Lane Marking"))
        self.action_find_single_crosswalk.setText(_translate("MainWindow", "Single Crosswalk"))
        self.action_find_crosswalk.setText(_translate("MainWindow", "Crosswalk"))
        self.action_change_ids_to_string.setText(_translate("MainWindow", "Change IDs to string"))
        self.actionCreate_Junction_2.setText(_translate("MainWindow", "Create Junction"))
        self.action_create_preliminary_odr_roads.setText(_translate("MainWindow", "Create Road (Preliminary)"))
        self.action_clear_odr_roads.setText(_translate("MainWindow", "Clear Road"))
        self.action_create_odr_roads.setText(_translate("MainWindow", "Create Road"))
        self.action_create_opendrive_no_signal.setText(_translate("MainWindow", "Create OpenDRIVE (no signal)"))
        self.action_create_opendrive.setText(_translate("MainWindow", "Create OpenDRIVE"))
        self.action_create_opendrive_fix_all_signal_road_id.setText(_translate("MainWindow", "Create OpenDRIVE (include signal, do search for matching road)"))
        self.action_create_road_objects_legacy.setText(_translate("MainWindow", "Create Road (Legacy)"))
        self.action_create_opendrive_legacy.setText(_translate("MainWindow", "Create OpenDRIVE (legacy)"))
        self.action_divide_a_link_smart.setText(_translate("MainWindow", "Divide Link (Smart)"))
        self.action_divide_a_link_keep_front.setText(_translate("MainWindow", "Divide Link (Keep Front)"))
        self.action_divide_a_link_keep_rear.setText(_translate("MainWindow", "Divide Link (Keep Rear)"))
        self.action_set_new_road_id.setText(_translate("MainWindow", "Set New Road ID"))
        self.action_add_link_point.setText(_translate("MainWindow", "Add Link Point"))
        self.action_merge_links.setText(_translate("MainWindow", "Merge Links"))
        self.action_connect_nodes.setText(_translate("MainWindow", "Connect Nodes"))
        self.action_gen_road_poly.setText(_translate("MainWindow", "Generate Road Polygon"))
        self.action_auto_generate_geometry_points.setText(_translate("MainWindow", "Auto-generate Geometry Points"))
        self.action_get_position_in_carla.setText(_translate("MainWindow", "Get Position in CARLA"))
        self.action_import_txt.setText(_translate("MainWindow", "Waypoint Text Files (.txt)"))
        self.action_import_stryx_geojson.setText(_translate("MainWindow", "Stryx (.geojson)"))
        self.action_import_naver_geojson.setText(_translate("MainWindow", "Naver (.geojson)"))
        self.action_import_roadrunner.setText(_translate("MainWindow", "RoadRunner GeoJSON (.geojson)"))
        self.action_import_OpenDRIVE.setText(_translate("MainWindow", "OpenDRIVE (.xodr)"))
        self.actionImport_Stryx.setText(_translate("MainWindow", "Stryx"))
        self.actionImport_Naver.setText(_translate("MainWindow", "Naver"))
        self.actionExport_Lane_Mesh.setText(_translate("MainWindow", "Lane Mesh"))
        self.actionExport_Road_Mesh.setText(_translate("MainWindow", "Road Mesh"))
        self.action_simplify_lane.setText(_translate("MainWindow", "Simplify Lane Markings (Export Lane)"))
        self.action_simplify_lane.setIconText(_translate("MainWindow", "Simplify Lane Markings (Export Lane)"))
        self.action_fill_lane_point.setText(_translate("MainWindow", "Fill Points in Lane Markings (Export Lane)"))
        self.action_fill_lane_point.setToolTip(_translate("MainWindow", "Fill Points in Lane Markings (Export Lane)"))
        self.action_find_location_error_link.setText(_translate("MainWindow", "Find Location Error Link"))
        self.action_reverse_link_points.setText(_translate("MainWindow", "Reverse Link Points"))
        self.action_find_opposite_direction_link.setText(_translate("MainWindow", "Find Opposite Direction Link"))
        self.action_find_duplicated_link.setText(_translate("MainWindow", "Find Duplicated Link"))
        self.action_find_empty_related_signal_link.setText(_translate("MainWindow", "Find Empty Related Signal Link"))
        self.actionImport_DeepMap.setText(_translate("MainWindow", "DeepMap"))
        self.actionImport_TomTom_avro.setText(_translate("MainWindow", "TomTom (.avro)"))
        self.actionImport_Civilmaps.setText(_translate("MainWindow", "Civilmaps"))
        self.actionImport_Mobiltech.setText(_translate("MainWindow", "Mobiltech"))
        self.actionImport_TomTom_shp.setText(_translate("MainWindow", "TomTom (.shp)"))
        self.actionImport_TomTom_geojson.setText(_translate("MainWindow", "TomTom (.geojson)"))
        self.action_find_concave_polygon.setText(_translate("MainWindow", "Find Concave SingleCrosswalk"))
        self.action_repair_concave_polygon.setText(_translate("MainWindow", "Repair Concave SingleCrosswalk"))
        self.action_find_junction_error.setText(_translate("MainWindow", "Find Junction Error"))
        self.action_repair_junction_error_incoming.setText(_translate("MainWindow", "Repair Junction Error (End Junctions)"))
        self.action_repair_junction_error_split.setText(_translate("MainWindow", "Repair Junction Error (Unregistered Fork)"))
        self.actionChange_World_Projection.setText(_translate("MainWindow", "Change World Projection"))
        self.actionChange_Workspace_Origin.setText(_translate("MainWindow", "Change Workspace Origin"))
        self.actionUser_Manual.setText(_translate("MainWindow", "User Manual"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionGeoJSON_geojson.setText(_translate("MainWindow", "GeoJSON (.geojson)"))
        self.actionImport.setText(_translate("MainWindow", "Import"))
        self.actionTest.setText(_translate("MainWindow", "Test"))
        self.actionChange_Region_Localization.setText(_translate("MainWindow", "Change Region Localization"))
        self.actionUndo.setText(_translate("MainWindow", "Undo"))
        self.actionRedo.setText(_translate("MainWindow", "Redo"))
        self.action_find_duplicated_lane.setText(_translate("MainWindow", "Find Duplicated Line"))
        self.action_fix_road_id_assignments.setText(_translate("MainWindow", "Fix Road ID Assignments"))
        self.action_find_missing_Lane_Marking.setText(_translate("MainWindow", "Find Missing Lane Markings"))
        self.action_delete_all_points_all.setText(_translate("MainWindow", "Delete All Points (All Lines)"))
        self.action_convert_lanelet2.setText(_translate("MainWindow", "Convert MGeo to Lanelet2"))
        self.action_import_open_scenario.setText(_translate("MainWindow", "OpenScenario (.xosc)"))
        self.actionDelete_Lane_Change_Links.setText(_translate("MainWindow", "Delete Lane Change Links"))
        self.action_find_end_nodes.setText(_translate("MainWindow", "Find End Nodes"))
        self.actionStart_Scenario.setText(_translate("MainWindow", "Start Simulation"))
        self.actionStop_Scenario.setText(_translate("MainWindow", "Stop Simulation"))
        self.actionCreate_Path_from_Selected_Links.setText(_translate("MainWindow", "Create Path from Selected Links"))
        self.actionCreate_Path_from_Start_End_Points.setText(_translate("MainWindow", "Create Path from Start/End Points"))
        self.actionReset_Path.setText(_translate("MainWindow", "Reset Path"))
        self.actionReset_Start_Points.setText(_translate("MainWindow", "Reset Start Point"))
        self.actionReset_End_Point.setText(_translate("MainWindow", "Reset End Point"))
        self.action_export_path_csv.setText(_translate("MainWindow", "Path (.csv)"))
        self.actionCreate_Path_from_Start_Stop_End_Points.setText(_translate("MainWindow", "Create Path from Start/Stop/End Points"))
        self.actionReset_Stop_Point.setText(_translate("MainWindow", "Reset Stop Point"))
        self.actionReset_All.setText(_translate("MainWindow", "Reset All"))
        self.action_find_lane_change_mismatch.setText(_translate("MainWindow", "Find Lane Change Mismatch"))
        self.action_repair_short_link.setText(_translate("MainWindow", "Repair Short Link"))
        self.action_find_short_link.setText(_translate("MainWindow", "FInd Short link"))
        self.action_add_mgeo.setText(_translate("MainWindow", "Add MGeo"))
        self.actionChange_NGII_map_to_MGeo.setText(_translate("MainWindow", "Change NGII map to MGeo"))
        self.action_fix_signal_road_connection.setText(_translate("MainWindow", "Fix Signal Road Connection"))
        self.actionExport_Structure_Mesh.setText(_translate("MainWindow", "Structure Mesh"))
        self.action_import_Lanelet2.setText(_translate("MainWindow", "Lanelet2 (.osm)"))
        self.action_find_intersecting_links.setText(_translate("MainWindow", "Find Intersecting links"))
        self.actionCheck_Intersection_Vicinity.setText(_translate("MainWindow", "Check Intersection Vicinity"))
        self.actionMake_Intersection_TL.setText(_translate("MainWindow", "Make Intersection TL"))
        self.actionImport_RAD_R.setText(_translate("MainWindow", "RAD-R"))
        self.actionAdd_Max_Speed.setText(_translate("MainWindow", "Add Max Speed"))
        self.menuFind_Overlapped_Node_2.setText(_translate("MainWindow", "Find Overlapped Node"))
        self.action_find_overlapped_node_.setText(_translate("MainWindow", "Find Overlapped Node"))
        self.actionFind_Dnaling_Link.setText(_translate("MainWindow", "Find Dnaling Link"))
        self.action_set_max_speed_link.setText(_translate("MainWindow", "Set Max Speed Link"))
        self.action_load_openscenario.setText(_translate("MainWindow", "Load OpenSCENARIO"))
        self.actionImport_MGeo_geojson.setText(_translate("MainWindow", "MGeo GeoJSON (.geojson)"))
        self.action_find_road_polygon.setText(_translate("MainWindow", "Road Polygon"))
        self.action_run_with_esmini.setText(_translate("MainWindow", "Run with Esmini"))
        self.actionOICD_oicd.setText(_translate("MainWindow", "OICD (.oicd)"))
        self.action_repair_closed_loop_Link.setText(_translate("MainWindow", "Repair Closed-loop Link"))
        self.action_find_closed_loop_link.setText(_translate("MainWindow", "Find Closed-loop Link"))
        self.action_delete_closed_loop_link.setText(_translate("MainWindow", "Delete Closed-loop Link"))
        self.actionffff.setText(_translate("MainWindow", "ffff"))
        self.actionMerge_MGeo.setText(_translate("MainWindow", "Merge MGeo"))
        self.actionApollo_OpenDRIVE_xml.setText(_translate("MainWindow", "Apollo OpenDRIVE (.xml)"))
        self.action_save_openscenario.setText(_translate("MainWindow", "Save OpenSCENARIO"))
        self.action_Cal_direction_of_the_traffic_signals.setText(_translate("MainWindow", "Calculate the direction of the traffic signals"))
        self.action_add_vehicle.setText(_translate("MainWindow", "Vehicle"))
        self.action_add_pedestrian.setText(_translate("MainWindow", "Pedestrian"))
        self.action_add_misc_object.setText(_translate("MainWindow", "MiscObject"))
        self.action_auto_create_junction.setText(_translate("MainWindow", "Create Junction (Auto)"))
        self.action_add_event.setText(_translate("MainWindow", "Add Event"))
        self.action_new_scenario.setText(_translate("MainWindow", "New Scenario"))
        self.actionFind_Stop_Line_Nodes.setText(_translate("MainWindow", "Find Stop Line Nodes"))
        self.actionFind_Related_Signal_Error.setText(_translate("MainWindow", "Find Related Signal Error"))
        self.actionKakaomobility.setText(_translate("MainWindow", "Kakaomobility"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
